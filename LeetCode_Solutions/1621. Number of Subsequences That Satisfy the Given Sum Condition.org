#+title: 1621. Number of Subsequences That Satisfy the Given Sum Condition
#+author: 钟离眜

#+begin_src ruby
# @param {Integer[]} nums
# @param {Integer} target
# @return {Integer}
MOD = 1000000007
@tmp = [1]
99999.times do
    @tmp << (@tmp[-1] << 1)
    @tmp[-1] -= MOD if @tmp[-1] >= MOD
end
def num_subseq(nums, target)
    nums.sort!
    right = nums.length - 1
    ans = 0
    left = 0
    until left > right
        if nums[left] + nums[right] <= target
            ans += @tmp[right - left]
            left += 1
            ans -= 1e9 + 7 if ans >= 1e9 + 7
        else
            right -= 1
        end
    end
    ans.to_i
end
#+end_src


#+begin_src cpp
#define MOD 1000000007
int tmp[100001];
static const auto Initialize = []{
    ios_base::sync_with_stdio(false), cin.tie(nullptr);
    tmp[0] = 1;
    for(int i = 1; i < 100001; i++){
        tmp[i] = tmp[i - 1] << 1;
        if(tmp[i] >= MOD)
            tmp[i] -= MOD;
    }
    return nullptr;
}();
class Solution {
public:
    int numSubseq(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int ans, len, left, right, i;
        len = nums.size();
        vector<int> tmp(len, 1);
        for (i = 1; i < len; i++){
            tmp[i] = tmp[i - 1] << 1;
            if (tmp[i] >= MOD)
                tmp[i] -= MOD;
        }

        for (left = ans = 0, right = len - 1; left <= right; ){
            if (nums[left] + nums[right] > target)
                right--;
            else {
                ans += tmp[right - left++];
                if (ans >= MOD)
                    ans -= MOD;
            }
        }
        return ans;
    }
};
#+end_src
