#+title: 1448. Count Good Nodes in Binary Tree
#+author: Vucius

#+begin_src cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int goodNodes(TreeNode* root) {
        int ans, max;
        ans = 0;
        vector<tuple<TreeNode*, int>> tmp, ttt;
        tmp.push_back(make_tuple(root, root->val));
        max = root->val;
        while(!tmp.empty()){
            ttt.clear();
            for (auto i : tmp){
                max = get<1>(i);
                if (get<0>(i)->val >= max){
                    max = get<0>(i)->val;
                    ans++;
                }
                if (get<0>(i)->left){
                    ttt.push_back(make_tuple(get<0>(i)->left, max));
                }
                if (get<0>(i)->right)
                    ttt.push_back(make_tuple(get<0>(i)->right, max));
                
            }
            tmp.assign(ttt.begin(), ttt.end());
        }
        return ans;
    }
};
#+end_src


#+begin_src ruby
# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val = 0, left = nil, right = nil)
#         @val = val
#         @left = left
#         @right = right
#     end
# end
# @param {TreeNode} root
# @return {Integer}
def good_nodes(root)
    ans = 0
    tmp = [[root, root.val]]
    until tmp.empty?
        list = []
        tmp.each do |e|
            max = e[1]
            if e[0].val >= max
                max = e[0].val
                ans += 1
            end
            list << [e[0].left, max] if e[0].left
            list << [e[0].right, max] if e[0].right
        end
        tmp = list
    end
    ans
end
#+end_src
