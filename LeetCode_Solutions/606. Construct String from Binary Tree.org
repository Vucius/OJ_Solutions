#+title: 606. Construct String from Binary Tree
#+date: <2022-04-17 ÖÜÈÕ>


#+begin_src cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    string tree2str(TreeNode* root) {
        if (!root)
            return "";
        TreeNode *lll, *rrr, *mmm;
        lll = (TreeNode*)malloc(sizeof(TreeNode));
        lll->val = 1001;// mean string "("
        rrr = (TreeNode*)malloc(sizeof(TreeNode));
        rrr->val = 1003;// mean string ")"
        mmm = (TreeNode*)malloc(sizeof(TreeNode));
        mmm->val = 1002;// mean string ")("
        vector<TreeNode*> tmp = {root};
        int len = 1;
        for (int i = 0; len; i++){
            if (tmp[i]->val > 1000)
                continue;
            else if (tmp[i]->right) {
                tmp.insert(tmp.begin() + i + 1, rrr);
                tmp.insert(tmp.begin() + i + 1, tmp[i]->right);
                tmp.insert(tmp.begin() + i + 1, mmm);
                if (tmp[i]->left){
                    tmp.insert(tmp.begin() + i + 1, tmp[i]->left);
                    len++;
                }
                tmp.insert(tmp.begin() + i + 1, lll);
            }
            else{
                if (tmp[i]->left){
                    tmp.insert(tmp.begin() + i + 1, rrr);
                    tmp.insert(tmp.begin() + i + 1, tmp[i]->left);
                    tmp.insert(tmp.begin() + i + 1, lll);
                }
                else
                    len--;
            }
        }
        string ans = "";
        for (auto k : tmp){
            switch(k->val){
                case 1001:
                    ans += "(";
                    break;
                case 1002:
                    ans +=")(";
                    break;
                case 1003:
                    ans += ")";
                    break;
                default:
                    ans += to_string(k->val);
            }
        }
        return ans;
    }
};
#+end_src




#+begin_src ruby
# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val = 0, left = nil, right = nil)
#         @val = val
#         @left = left
#         @right = right
#     end
# end
# @param {TreeNode} root
# @return {String}
def tree2str(root)
    return "" if root.nil?
    nood = [root]
    count = 1
    i = 0
    while count > 0
        if nood[i].class.to_s == "String"
        elsif nood[i].right
            if nood[i].left
                nood.insert(i + 1, nood[i].val, "(", nood[i].left, ")(", nood[i].right, ")")
                count += 1
            else
                nood.insert(i + 1, nood[i].val, "()(", nood[i].right, ")")
            end
            nood.delete_at(i)
        else
            if nood[i].left
                nood.insert(i + 1, "(", nood[i].left, ")") 
            else
                count -= 1
            end
            nood.insert(i + 1, nood[i].val)
            nood.delete_at(i)
        end
        i += 1
    end
    nood.join
end
#+end_src


