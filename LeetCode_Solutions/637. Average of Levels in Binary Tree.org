#+title: 637. Average of Levels in Binary Tree
#+author: ÷”¿Î±u

#+begin_src cpp
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> ans;
        vector<TreeNode*> tmp, list;
        int count;
        double sum;
        list.push_back(root);
        while (!list.empty()){
            sum = count = 0;
            tmp.clear();
            for (auto l : list){
                sum += l->val;
                count++;
                if (l->left)
                    tmp.push_back(l->left);
                if (l->right)
                    tmp.push_back(l->right);
            }
            ans.push_back(sum/count);
            list.assign(tmp.begin(), tmp.end());
        }
        return ans;
    }
};
#+end_src

#+begin_src ruby
# Definition for a binary tree node.
# class TreeNode
#     attr_accessor :val, :left, :right
#     def initialize(val = 0, left = nil, right = nil)
#         @val = val
#         @left = left
#         @right = right
#     end
# end
# @param {TreeNode} root
# @return {Float[]}
def average_of_levels(root)
    ans = []
    list = [root]
    until list.empty?
        count = 0
        sum = 0.0
        tmp = []
        list.each do |e|
            sum += e.val
            count += 1
            tmp << e.left if e.left
            tmp << e.right if e.right
        end
        ans << sum/count
        list = tmp
    end
    ans
end
#+end_src


